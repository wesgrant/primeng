{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAsD;AACtD,wCAAqC;AAGrC,gDAA6C;AAArC,kCAAA,UAAU,CAAA;AAmFlB,IAAa,mBAAmB;IADhC;QAGY,8BAAyB,GAAG,IAAI,iBAAO,EAAgB,CAAC;QACxD,6BAAwB,GAAG,IAAI,iBAAO,EAAgB,CAAC;QAE/D,yBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC;QACrE,WAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,CAAC;IAU1D,CAAC;IARG,qCAAO,GAAP,UAAQ,YAA0B;QAC9B,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,sCAAQ,GAAR;QACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IACL,0BAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,mBAAmB;IAD/B,iBAAU,EAAE;GACA,mBAAmB,CAgB/B;AAhBY,kDAAmB;AA2BhC,IAAa,mBAAmB;IADhC;QAGY,oBAAe,GAAG,IAAI,iBAAO,EAAqB,CAAC;QACnD,mBAAc,GAAG,IAAI,iBAAO,EAAqB,CAAC;QAE1D,eAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACjD,cAAS,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IASnD,CAAC;IAPG,uCAAS,GAAT,UAAU,KAAwB;QAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,sCAAQ,GAAR,UAAS,KAAwB;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IACL,0BAAC;AAAD,CAAC,AAfD,IAeC;AAfY,mBAAmB;IAD/B,iBAAU,EAAE;GACA,mBAAmB,CAe/B;AAfY,kDAAmB","sourcesContent":["import {EventEmitter,Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\nexport {DomHandler} from '../dom/domhandler';\r\n\r\nexport interface SortMeta {\r\n    field: string;\r\n    order: number;\r\n}\r\n\r\nexport interface LazyLoadEvent {\r\n    first?: number;\r\n    rows?: number;\r\n    sortField?: string;\r\n    sortOrder?: number;\r\n    multiSortMeta?: SortMeta[];\r\n    filters?: {[s: string]: FilterMetadata;};\r\n    globalFilter?: any;\r\n}\r\n\r\nexport interface FilterMetadata {\r\n    value?: any;\r\n    matchMode?: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n    label?: string;\r\n    icon?: string;\r\n    command?: (event?: any) => void;\r\n    url?: string;\r\n    routerLink?: any;\r\n    eventEmitter?: EventEmitter<any>;\r\n    items?: MenuItem[];\r\n    expanded?: boolean;\r\n    disabled?: boolean;\r\n    visible?: boolean;\r\n    target?: string;\r\n}\r\n\r\nexport interface Message {\r\n    severity?: string;\r\n    summary?: string;\r\n    detail?: string;\r\n}\r\n\r\nexport interface SelectItem {\r\n    label: string;\r\n    value: any;\r\n}\r\n\r\nexport interface TreeNodeÂ {\r\n    label?: string;\r\n    data?: any;\r\n    icon?: any;\r\n    expandedIcon?: any;\r\n    collapsedIcon?: any;\r\n    children?: TreeNode[];\r\n    leaf?: boolean;\r\n    expanded?: boolean;\r\n    type?: string;\r\n    parent?: TreeNode;\r\n    partialSelected?: boolean;\r\n    styleClass?: string;\r\n    draggable?: boolean;\r\n    droppable?: boolean;\r\n    selectable?: boolean;\r\n}\r\n\r\nexport interface Confirmation {\r\n    message: string;\r\n    key?: string;\r\n    icon?: string;\r\n    header?: string;\r\n    accept?: Function;\r\n    reject?: Function;\r\n    acceptVisible?: boolean;\r\n    rejectVisible?: boolean;\r\n    acceptEvent?: EventEmitter<any>;\r\n    rejectEvent?: EventEmitter<any>;\r\n}\r\n\r\nexport interface BlockableUI {\r\n    getBlockableElement(): HTMLElement;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfirmationService {\r\n\r\n    private requireConfirmationSource = new Subject<Confirmation>();\r\n    private acceptConfirmationSource = new Subject<Confirmation>();\r\n\r\n    requireConfirmation$ = this.requireConfirmationSource.asObservable();\r\n    accept = this.acceptConfirmationSource.asObservable();\r\n\r\n    confirm(confirmation: Confirmation) {\r\n        this.requireConfirmationSource.next(confirmation);\r\n        return this;\r\n    }\r\n\r\n    onAccept() {\r\n        this.acceptConfirmationSource.next();\r\n    }\r\n}\r\n\r\nexport interface TreeNodeDragEvent {\r\n    tree?: any;\r\n    node?: TreeNode;\r\n    subNodes?: TreeNode[];\r\n    index?: number;\r\n    scope?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class TreeDragDropService {\r\n    \r\n    private dragStartSource = new Subject<TreeNodeDragEvent>();\r\n    private dragStopSource = new Subject<TreeNodeDragEvent>();\r\n    \r\n    dragStart$ = this.dragStartSource.asObservable();\r\n    dragStop$ = this.dragStopSource.asObservable();\r\n    \r\n    startDrag(event: TreeNodeDragEvent) {\r\n        this.dragStartSource.next(event);\r\n    }\r\n    \r\n    stopDrag(event: TreeNodeDragEvent) {\r\n        this.dragStopSource.next(event);\r\n    }\r\n}"]}