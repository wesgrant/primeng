{"version":3,"file":"captcha.js","sourceRoot":"","sources":["captcha.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ViewChild, ElementRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'p-captcha',\r\n    template: `<div #target></div>`\r\n})\r\nexport class Captcha implements AfterViewInit {\r\n\r\n    @Input() siteKey: string = null;\r\n        \r\n    @Input() theme = 'light';\r\n    \r\n    @Input() type = 'image';\r\n    \r\n    @Input() size = 'normal';\r\n    \r\n    @Input() tabindex = 0;\r\n    \r\n    @Input() language: string = null;\r\n    \r\n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('target') el: ElementRef;\r\n    \r\n    private _instance: any = null;\r\n\r\n    constructor(public _zone:NgZone) {}\r\n    \r\n    ngAfterViewInit() {\r\n        if ((<any>window).grecaptcha)\r\n            this.init();\r\n        else {\r\n            console.warn(\"Recaptcha is not loaded\");\r\n            return;\r\n        } \r\n    }\r\n    \r\n    init()Â {\r\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement, {\r\n            'sitekey': this.siteKey,\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabindex,\r\n            'hl': this.language,\r\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\r\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\r\n        });\r\n    }\r\n    \r\n    reset() {\r\n        if(this._instance === null)\r\n            return;\r\n        \r\n        (<any>window).grecaptcha.reset(this._instance);\r\n    }\r\n    \r\n    getResponse(): String {\r\n        if (this._instance === null)\r\n            return null;\r\n        \r\n        return (<any>window).grecaptcha.getResponse(this._instance);\r\n    }\r\n    \r\n    recaptchaCallback(response: string) {\r\n        this.onResponse.emit({\r\n            response: response\r\n        });\r\n    }\r\n\r\n    recaptchaExpiredCallback() {\r\n        this.onExpire.emit();\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if (this._instance != null) {\r\n          (<any>window).grecaptcha.reset(this._instance);\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Captcha],\r\n    declarations: [Captcha]\r\n})\r\nexport class CaptchaModule { }"]}