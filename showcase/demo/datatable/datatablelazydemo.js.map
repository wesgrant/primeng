{"version":3,"file":"datatablelazydemo.js","sourceRoot":"","sources":["datatablelazydemo.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA+C;AAE/C,oDAAiD;AAOjD,IAAa,iBAAiB;IAQ1B,2BAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/C,oCAAQ,GAAR;QAAA,iBAOC;QANG,sBAAsB;QACtB,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI;YACpC,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAC3C,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAY,GAAZ,UAAa,KAAoB;QAC7B,2FAA2F;QAC3F,gCAAgC;QAChC,sCAAsC;QACtC,2CAA2C;QAC3C,kEAAkE;QAClE,gGAAgG;QANpG,iBAcC;QANG,sCAAsC;QACtC,UAAU,CAAC;YACP,EAAE,CAAA,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjB,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/E,CAAC;QACL,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IACL,wBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,iBAAiB;IAH7B,gBAAS,CAAC;QACP,WAAW,EAAE,gDAAgD;KAChE,CAAC;qCASkC,uBAAU;GARjC,iBAAiB,CAkC7B;AAlCY,8CAAiB","sourcesContent":["import {Component,OnInit} from '@angular/core';\r\nimport {Car} from '../domain/car';\r\nimport {CarService} from '../service/carservice';\r\nimport {LazyLoadEvent} from '../../../components/common/api';\r\nimport {FilterMetadata} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: 'showcase/demo/datatable/datatablelazydemo.html',\r\n})\r\nexport class DataTableLazyDemo implements OnInit {\r\n\r\n    datasource: Car[];\r\n    \r\n    cars: Car[];\r\n    \r\n    totalRecords: number;\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        //datasource imitation\r\n        this.carService.getCarsLarge().then(cars => {\r\n            this.datasource = cars; \r\n            this.totalRecords = this.datasource.length;\r\n            this.cars = this.datasource.slice(0, 10);\r\n        });\r\n    }\r\n    \r\n    loadCarsLazy(event: LazyLoadEvent) {\r\n        //in a real application, make a remote request to load data using state metadata from event\r\n        //event.first = First row offset\r\n        //event.rows = Number of rows per page\r\n        //event.sortField = Field name to sort with\r\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\r\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\r\n        \r\n        //imitate db connection over a network\r\n        setTimeout(() => {\r\n            if(this.datasource) {\r\n                this.cars = this.datasource.slice(event.first, (event.first + event.rows));\r\n            }\r\n        }, 250);\r\n    }\r\n}"]}