{"version":3,"file":"autocompletedemo.js","sourceRoot":"","sources":["autocompletedemo.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAwC;AACxC,4DAAyD;AAKzD,IAAa,gBAAgB;IAgBzB,0BAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QANlD,WAAM,GAAa,CAAC,MAAM,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,UAAU,EAAC,SAAS,EAAC,OAAO,EAAC,IAAI,CAAC,CAAC;IAM7C,CAAC;IAEvD,8CAAmB,GAAnB,UAAoB,KAAK;QAAzB,iBAKC;QAJG,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,SAAS;YAC7C,KAAI,CAAC,uBAAuB,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gDAAqB,GAArB,UAAsB,KAAK;QAA3B,iBAKC;QAJG,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,SAAS;YAC7C,KAAI,CAAC,yBAAyB,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAa,GAAb,UAAc,KAAK,EAAE,SAAgB;QACjC,qIAAqI;QACrI,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAA,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC9D,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,CAAC;QACL,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED,uCAAY,GAAZ,UAAa,KAAK;QACd,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAA,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;IACL,CAAC;IAED,8CAAmB,GAAnB;QAAA,iBAOC;QANG,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAEzB,mBAAmB;QACnB,UAAU,CAAC;YACP,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC;QACtC,CAAC,EAAE,GAAG,CAAC,CAAA;IACX,CAAC;IACL,uBAAC;AAAD,CAAC,AA9DD,IA8DC;AA9DY,gBAAgB;IAH5B,gBAAS,CAAC;QACP,WAAW,EAAE,kDAAkD;KAClE,CAAC;qCAiBsC,+BAAc;GAhBzC,gBAAgB,CA8D5B;AA9DY,4CAAgB","sourcesContent":["import {Component} from '@angular/core';\r\nimport {CountryService} from '../service/countryservice';\r\n\r\n@Component({\r\n    templateUrl: 'showcase/demo/autocomplete/autocompletedemo.html'\r\n})\r\nexport class AutoCompleteDemo {\r\n\r\n    country: any;\r\n    \r\n    countries: any[];\r\n        \r\n    filteredCountriesSingle: any[];\r\n    \r\n    filteredCountriesMultiple: any[];\r\n    \r\n    brands: string[] = ['Audi','BMW','Fiat','Ford','Honda','Jaguar','Mercedes','Renault','Volvo','VW'];\r\n    \r\n    filteredBrands: any[];\r\n    \r\n    brand: string;\r\n    \r\n    constructor(private countryService: CountryService) { }\r\n    \r\n    filterCountrySingle(event) {\r\n        let query = event.query;        \r\n        this.countryService.getCountries().then(countries => {\r\n            this.filteredCountriesSingle = this.filterCountry(query, countries);\r\n        });\r\n    }\r\n    \r\n    filterCountryMultiple(event) {\r\n        let query = event.query;\r\n        this.countryService.getCountries().then(countries => {\r\n            this.filteredCountriesMultiple = this.filterCountry(query, countries);\r\n        });\r\n    }\r\n    \r\n    filterCountry(query, countries: any[]):any[] {\r\n        //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\r\n        let filtered : any[] = [];\r\n        for(let i = 0; i < countries.length; i++) {\r\n            let country = countries[i];\r\n            if(country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\r\n                filtered.push(country);\r\n            }\r\n        }\r\n        return filtered;\r\n    }\r\n        \r\n    filterBrands(event) {\r\n        this.filteredBrands = [];\r\n        for(let i = 0; i < this.brands.length; i++) {\r\n            let brand = this.brands[i];\r\n            if(brand.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {\r\n                this.filteredBrands.push(brand);\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleDropdownClick() {\r\n        this.filteredBrands = [];\r\n        \r\n        //mimic remote call\r\n        setTimeout(() => {\r\n            this.filteredBrands = this.brands;\r\n        }, 100)\r\n    }\r\n}"]}